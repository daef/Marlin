import sys
import argparse

decryptionTable = {
# Byte Range 0x0-0xf
0x0: 0xaa,
0x1: 0xae,
0x2: 0xb2,
0x3: 0xb6,
0x4: 0xba,
0x5: 0xbe,
0x6: 0xa2,
0x7: 0xa6,
0x8: 0xca,
0x9: 0xce,
0xa: 0xd2,
0xb: 0xd6,
0xc: 0xda,
0xd: 0xde,
0xe: 0xc2,
0xf: 0xc6,
# Byte Range 0x10-0x1f
0x10: 0xea,
0x11: 0xee,
0x12: 0xf2,
0x13: 0xf6,
0x14: 0xfa,
0x15: 0xfe,
0x16: 0xe2,
0x17: 0xe6,
0x18: 0xb,
0x19: 0xf,
0x1a: 0x13,
0x1b: 0x17,
0x1c: 0x1b,
0x1d: 0x1f,
0x1e: 0x3,
0x1f: 0x7,
# Byte Range 0x20-0x2f
0x20: 0x2b,
0x21: 0x2f,
0x22: 0x33,
0x23: 0x37,
0x24: 0x3b,
0x25: 0x3f,
0x26: 0x23,
0x27: 0x27,
0x28: 0x4b,
0x29: 0x4f,
0x2a: 0x53,
0x2b: 0x57,
0x2c: 0x5b,
0x2d: 0x5f,
0x2e: 0x43,
0x2f: 0x47,
# Byte Range 0x30-0x3f
0x30: 0x6b,
0x31: 0x6f,
0x32: 0x73,
0x33: 0x77,
0x34: 0x7b,
0x35: 0x7f,
0x36: 0x63,
0x37: 0x67,
0x38: 0x8b,
0x39: 0x8f,
0x3a: 0x93,
0x3b: 0x97,
0x3c: 0x9b,
0x3d: 0x9f,
0x3e: 0x83,
0x3f: 0x87,
# Byte Range 0x40-0x4f
0x40: 0xab,
0x41: 0xaf,
0x42: 0xb3,
0x43: 0xb7,
0x44: 0xbb,
0x45: 0xbf,
0x46: 0xa3,
0x47: 0xa7,
0x48: 0xcb,
0x49: 0xcf,
0x4a: 0xd3,
0x4b: 0xd7,
0x4c: 0xdb,
0x4d: 0xdf,
0x4e: 0xc3,
0x4f: 0xc7,
# Byte Range 0x50-0x5f
0x50: 0xeb,
0x51: 0xef,
0x52: 0xf3,
0x53: 0xf7,
0x54: 0xfb,
0x55: 0xff,
0x56: 0xe3,
0x57: 0xe7,
0x58: 0xc,
0x59: 0x10,
0x5a: 0x14,
0x5b: 0x18,
0x5c: 0x1c,
0x5d: 0x0,
0x5e: 0x4,
0x5f: 0x8,
# Byte Range 0x60-0x6f
0x60: 0x2c,
0x61: 0x30,
0x62: 0x34,
0x63: 0x38,
0x64: 0x3c,
0x65: 0x20,
0x66: 0x24,
0x67: 0x28,
0x68: 0x4c,
0x69: 0x50,
0x6a: 0x54,
0x6b: 0x58,
0x6c: 0x5c,
0x6d: 0x40,
0x6e: 0x44,
0x6f: 0x48,
# Byte Range 0x70-0x7f
0x70: 0x6c,
0x71: 0x70,
0x72: 0x74,
0x73: 0x78,
0x74: 0x7c,
0x75: 0x60,
0x76: 0x64,
0x77: 0x68,
0x78: 0x8c,
0x79: 0x90,
0x7a: 0x94,
0x7b: 0x98,
0x7c: 0x9c,
0x7d: 0x80,
0x7e: 0x84,
0x7f: 0x88,
# Byte Range 0x80-0x8f
0x80: 0xac,
0x81: 0xb0,
0x82: 0xb4,
0x83: 0xb8,
0x84: 0xbc,
0x85: 0xa0,
0x86: 0xa4,
0x87: 0xa8,
0x88: 0xcc,
0x89: 0xd0,
0x8a: 0xd4,
0x8b: 0xd8,
0x8c: 0xdc,
0x8d: 0xc0,
0x8e: 0xc4,
0x8f: 0xc8,
# Byte Range 0x90-0x9f
0x90: 0xec,
0x91: 0xf0,
0x92: 0xf4,
0x93: 0xf8,
0x94: 0xfc,
0x95: 0xe0,
0x96: 0xe4,
0x97: 0xe8,
0x98: 0xd,
0x99: 0x11,
0x9a: 0x15,
0x9b: 0x19,
0x9c: 0x1d,
0x9d: 0x1,
0x9e: 0x5,
0x9f: 0x9,
# Byte Range 0xa0-0xaf
0xa0: 0x2d,
0xa1: 0x31,
0xa2: 0x35,
0xa3: 0x39,
0xa4: 0x3d,
0xa5: 0x21,
0xa6: 0x25,
0xa7: 0x29,
0xa8: 0x4d,
0xa9: 0x51,
0xaa: 0x55,
0xab: 0x59,
0xac: 0x5d,
0xad: 0x41,
0xae: 0x45,
0xaf: 0x49,
# Byte Range 0xb0-0xbf
0xb0: 0x6d,
0xb1: 0x71,
0xb2: 0x75,
0xb3: 0x79,
0xb4: 0x7d,
0xb5: 0x61,
0xb6: 0x65,
0xb7: 0x69,
0xb8: 0x8d,
0xb9: 0x91,
0xba: 0x95,
0xbb: 0x99,
0xbc: 0x9d,
0xbd: 0x81,
0xbe: 0x85,
0xbf: 0x89,
# Byte Range 0xc0-0xcf
0xc0: 0xad,
0xc1: 0xb1,
0xc2: 0xb5,
0xc3: 0xb9,
0xc4: 0xbd,
0xc5: 0xa1,
0xc6: 0xa5,
0xc7: 0xa9,
0xc8: 0xcd,
0xc9: 0xd1,
0xca: 0xd5,
0xcb: 0xd9,
0xcc: 0xdd,
0xcd: 0xc1,
0xce: 0xc5,
0xcf: 0xc9,
# Byte Range 0xd0-0xdf
0xd0: 0xed,
0xd1: 0xf1,
0xd2: 0xf5,
0xd3: 0xf9,
0xd4: 0xfd,
0xd5: 0xe1,
0xd6: 0xe5,
0xd7: 0xe9,
0xd8: 0xe,
0xd9: 0x12,
0xda: 0x16,
0xdb: 0x1a,
0xdc: 0x1e,
0xdd: 0x2,
0xde: 0x6,
0xdf: 0xa,
# Byte Range 0xe0-0xef
0xe0: 0x2e,
0xe1: 0x32,
0xe2: 0x36,
0xe3: 0x3a,
0xe4: 0x3e,
0xe5: 0x22,
0xe6: 0x26,
0xe7: 0x2a,
0xe8: 0x4e,
0xe9: 0x52,
0xea: 0x56,
0xeb: 0x5a,
0xec: 0x5e,
0xed: 0x42,
0xee: 0x46,
0xef: 0x4a,
# Byte Range 0xf0-0xff
0xf0: 0x6e,
0xf1: 0x72,
0xf2: 0x76,
0xf3: 0x7a,
0xf4: 0x7e,
0xf5: 0x62,
0xf6: 0x66,
0xf7: 0x6a,
0xf8: 0x8e,
0xf9: 0x92,
0xfa: 0x96,
0xfb: 0x9a,
0xfc: 0x9e,
0xfd: 0x82,
0xfe: 0x86,
0xff: 0x8a,
}

def decrypt(inputFile, outputFile):
    print "Decrypting", inputFile, "to", outputFile
    b = bytearray(open(inputFile, 'rb').read())

    for i in range(len(b)):
        result = b[i]
        result = (decryptionTable.get(result))
        b[i] = result;

    open(outputFile, 'wb').write(b)

def encrypt(inputFile, outputFile):
    print "Encrypting", inputFile, "to", outputFile
    encryptionTable = { value:key for key, value in decryptionTable.items() }
    b = bytearray(open(inputFile, 'rb').read())

    for i in range(len(b)):
        result = b[i]
        result = (encryptionTable.get(result))
        b[i] = result;

    open(outputFile, 'wb').write(b)

# Main function
parser = argparse.ArgumentParser("Lerdge Encryption Script Manager")
parser.add_argument("inputFile", help="File to read from.")
parser.add_argument("outputFile", help="File to write to.")
parser.add_argument("operation", help="encrypt or decrypt.")

args = parser.parse_args()

if args.operation == "decrypt":
    decrypt(args.inputFile, args.outputFile)
else:
    encrypt(args.inputFile, args.outputFile)
